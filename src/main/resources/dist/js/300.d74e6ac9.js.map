{"version":3,"file":"js/300.d74e6ac9.js","mappings":"6cAkEA,MAAMA,EAAQC,EASRC,EAAOC,EAEPC,GAAUC,EAAAA,EAAAA,IAAS,CACvBC,IAAKA,IAAMN,EAAMO,cACjBC,IAAMC,GAAQP,EAAK,uBAAwBO,KAGvCC,GAAWC,EAAAA,EAAAA,IAAI,CACnBC,GAAI,KACJC,SAAU,EACVC,KAAM,GACNC,KAAM,GACNC,UAAW,GACXC,WAAY,GACZC,KAAM,IACNC,KAAM,KAGFC,GAAQC,EAAAA,EAAAA,IAAS,CACrBR,SAAU,CAAC,CAACS,UAAU,EAAMC,QAAS,iDAAkDC,QAAS,WAChGC,KAAM,CAAC,CAACH,UAAU,EAAMC,QAAS,wCAAyCC,QAAS,SACnFV,KAAM,CAAC,CAACQ,UAAU,EAAMC,QAAS,0CAA2CC,QAAS,SACrFT,KAAM,CAAC,CAACO,UAAU,EAAMC,QAAS,wCAAyCC,QAAS,SACnFR,UAAW,CAAC,CAACM,UAAU,EAAMC,QAAS,8CAA+CC,QAAS,SAC9FP,WAAY,CAAC,CAACK,UAAU,EAAMC,QAAS,sCAAuCC,QAAS,WAGnFE,EAAQ,CACZC,MAAO,QACPC,SAAU,IAGNA,GAAWjB,EAAAA,EAAAA,IAAI,IAEfkB,GAAUlB,EAAAA,EAAAA,IAAI,CAClB,CACEmB,MAAO,EACPC,MAAO,+BACPC,SAAU,MAIRC,GAAUtB,EAAAA,EAAAA,MAEVuB,GAAYvB,EAAAA,EAAAA,KAAI,GAEhBwB,EAAUA,KACdT,EAAMC,MAAQ,SACdS,EAAAA,EAAAA,GAAUH,EAAQH,OAClBI,EAAUJ,OAAQ,EAClBO,IACIrC,EAAMsC,QAAQ1B,KAChBc,EAAMC,MAAQ,SACdjB,EAASoB,MAAQ9B,EAAMsC,SAEzBC,GAAa,EAGTF,EAAiBA,MACrBG,EAAAA,EAAAA,MAAoBC,MAAKC,IACnBA,EAAIC,QACNd,EAAQC,MAAM,GAAGE,SAAWU,EAAIE,MAEhCC,EAAAA,EAAAA,IAASH,EAAII,IACf,GACA,EAGEC,EAAaA,KACjBd,EAAQH,MAAMkB,UAAUC,IAClBA,IACFf,EAAUJ,OAAQ,GAClBoB,EAAAA,EAAAA,IAASxC,EAASoB,OAAOW,MAAKC,IACxBA,EAAIC,UACNQ,EAAAA,EAAAA,IAAWT,EAAIE,MACfxC,EAAQ0B,OAAQ,EAChB5B,EAAK,cAEL2C,EAAAA,EAAAA,IAASH,EAAII,KAEfZ,EAAUJ,OAAQ,CAAK,IAE3B,GACA,EAGES,EAAcA,KAClB,MAAMa,EAAWC,EAAQ,MACnBC,EAAgBC,KAAKC,MAAMD,KAAKE,UAAUL,EAASM,SACzD9B,EAASE,MAAQwB,EAAcK,KAAIC,IACjCA,EAAKC,WAAa,iBAAmBD,EAAKC,WACnCD,IACP,EAGEE,EAAahC,IACjBpB,EAASoB,MAAMX,KAAOW,CAAK,E,wsICrK7B,MAAMiC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://quasardesign/./src/views/menu/editMenu.vue","webpack://quasardesign/./src/views/menu/editMenu.vue?19fa"],"sourcesContent":["<template>\r\n  <el-dialog :title=\"state.title\" v-model=\"visible\" draggable :close-on-click-modal=\"false\" @opened=\"openFun\">\r\n    <el-form :model=\"menuForm\" :rules=\"rules\" ref=\"menuRef\" label-width=\"120px\">\r\n      <el-form-item v-show=\"false\" prop=\"id\">\r\n        <el-input v-model=\"menuForm.id\"></el-input>\r\n      </el-form-item>\r\n      <el-row>\r\n        <el-col :span=\"12\">\r\n          <el-form-item label=\"Directorio principal\" prop=\"parentId\">\r\n            <el-tree-select key-node=\"value\" v-model=\"menuForm.parentId\" :data=\"options\" check-strictly :render-after-expand=\"false\"></el-tree-select>\r\n          </el-form-item>\r\n        </el-col>\r\n        <el-col :span=\"12\">\r\n          <el-form-item label=\"clasificar\" prop=\"sort\">\r\n            <el-input v-model=\"menuForm.sort\" placeholder=\"Por favor ingrese clasificación\" clearable></el-input>\r\n          </el-form-item>\r\n        </el-col>\r\n      </el-row>\r\n      <el-form-item label=\"tipo de menu\" prop=\"type\">\r\n        <el-radio-group v-model=\"menuForm.type\">\r\n          <el-radio :label=\"'1'\">menu</el-radio>\r\n          <el-radio :label=\"'2'\">pagina</el-radio>\r\n          <el-radio :label=\"'3'\">boton</el-radio>\r\n        </el-radio-group>\r\n      </el-form-item>\r\n      <el-form-item label=\"nombre del menu\" prop=\"name\">\r\n        <el-input v-model=\"menuForm.name\" placeholder=\"Por favor ingresa un nombre de menú\" clearable></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"seleccionar icono\" prop=\"icon\">\r\n            <el-popover placement=\"bottom\" trigger=\"click\" width=\"300px;\">\r\n              <template #reference>\r\n                <el-input v-model=\"menuForm.icon\" prefix-icon=\"PorFavorSeleccioneUnIconoDeMenu\" clearable></el-input>\r\n              </template>\r\n              <el-row class=\"icon-row\">\r\n                <el-col v-for=\"(item, index) in iconList\" :key=\"index\" :span=\"8\">\r\n                  <i :class=\"item.font_class\" style=\"font-size: 40px;\" @click=\"checkIcon(item.font_class)\"></i>\r\n                  <i style=\"display: flow-root;\">{{item.name}}</i>\r\n                </el-col>\r\n              </el-row>\r\n            </el-popover>\r\n      </el-form-item>\r\n      <el-form-item v-if=\"menuForm.type === '2' || menuForm.type === '3'\" label=\"camino de acceso\" prop=\"path\">\r\n        <el-input v-model=\"menuForm.path\" placeholder=\"Por favor ingrese la ruta del menú\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item v-if=\"menuForm.type === '2'\" label=\"ruta del componente\" prop=\"component\">\r\n        <el-input v-model=\"menuForm.component\" placeholder=\"Por favor ingresa a la pagina component\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item v-if=\"menuForm.type === '3'\" label=\"Permisos de botones\" prop=\"permission\">\r\n        <el-input v-model=\"menuForm.permission\" placeholder=\"Por favor ingrese los permisos\"></el-input>\r\n      </el-form-item>\r\n    </el-form>\r\n    <template #footer>\r\n      <span>\r\n        <el-button @click=\"resetForm(menuRef)\">reiniciar</el-button>\r\n        <el-button type=\"primary\" :loading=\"isLoading\" @click=\"submitMenu\">seguro</el-button>\r\n    </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {getMenuTreeSelect, editMenu} from \"../../api/menu/sysMenu\";\r\nimport {errorMsg, successMsg} from \"../../utils/message\";\r\nimport {resetForm} from \"../../utils/common\";\r\nimport {computed, reactive, ref} from \"vue\";\r\n\r\nconst props = defineProps({\r\n  dialogVisible: {\r\n    type: Boolean,\r\n    require: true,\r\n    default: false\r\n  },\r\n  menuObj: Object\r\n})\r\n\r\nconst emit = defineEmits(['update:dialogVisible', 'get-list'])\r\n\r\nconst visible = computed({\r\n  get: () => props.dialogVisible,\r\n  set: (val) => emit('update:dialogVisible', val)\r\n})\r\n\r\nconst menuForm = ref({\r\n  id: null,\r\n  parentId: 0,\r\n  name: '',\r\n  path: '',\r\n  component: '',\r\n  permission: '',\r\n  type: '1',\r\n  icon: ''\r\n})\r\n\r\nconst rules = reactive({\r\n  parentId: [{required: true, message: 'El menú de nivel superior no puede estar vacío', trigger: 'change'}],\r\n  sort: [{required: true, message: 'La clasificación no puede estar vacía', trigger: 'blur'}],\r\n  name: [{required: true, message: 'El nombre del menú no puede estar vacío', trigger: 'blur'}],\r\n  path: [{required: true, message: 'La ruta del menú no puede estar vacía', trigger: 'blur'}],\r\n  component: [{required: true, message: 'La ruta del componente no puede estar vacía', trigger: 'blur'}],\r\n  permission: [{required: true, message: 'Los permisos no pueden estar vacíos', trigger: 'blur'}],\r\n})\r\n\r\nconst state = {\r\n  title: 'Nuevo',\r\n  iconList: []\r\n}\r\n\r\nconst iconList = ref([])\r\n\r\nconst options = ref([\r\n  {\r\n    value: 0,\r\n    label: 'directorio de nivel superior',\r\n    children: []\r\n  }\r\n])\r\n\r\nconst menuRef = ref()\r\n\r\nconst isLoading = ref(false)\r\n\r\nconst openFun = () => {\r\n  state.title = 'Nuevo'\r\n  resetForm(menuRef.value)\r\n  isLoading.value = false\r\n  getMenuTreeFun()\r\n  if (props.menuObj.id){\r\n    state.title = 'Editar'\r\n    menuForm.value = props.menuObj\r\n  }\r\n  getIconList()\r\n}\r\n//  Obtener árbol de menú desplegable\r\nconst getMenuTreeFun = () => {\r\n  getMenuTreeSelect().then(res => {\r\n    if (res.success){\r\n      options.value[0].children = res.data\r\n    } else {\r\n      errorMsg(res.msg)\r\n    }\r\n  })\r\n}\r\n//  entregar\r\nconst submitMenu = () => {\r\n  menuRef.value.validate((valid) => {\r\n    if (valid){\r\n      isLoading.value = true\r\n      editMenu(menuForm.value).then(res => {\r\n        if (res.success){\r\n          successMsg(res.data)\r\n          visible.value = false\r\n          emit('get-list')\r\n        } else {\r\n          errorMsg(res.msg)\r\n        }\r\n        isLoading.value = false\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nconst getIconList = () => {\r\n  const iconJson = require('../../assets/iconfont/iconfont.json')\r\n  const iconClassList = JSON.parse(JSON.stringify(iconJson.glyphs))\r\n  iconList.value = iconClassList.map(item => {\r\n    item.font_class = 'iconfont icon-' + item.font_class\r\n    return item\r\n  })\r\n}\r\n\r\nconst checkIcon = (value) => {\r\n  menuForm.value.icon = value\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n .icon-row{\r\n   text-align: center;\r\n   height: 300px;\r\n   overflow-y: auto;\r\n }\r\n</style>","import script from \"./editMenu.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./editMenu.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./editMenu.vue?vue&type=style&index=0&id=38ae5762&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-38ae5762\"]])\n\nexport default __exports__"],"names":["props","__props","emit","__emit","visible","computed","get","dialogVisible","set","val","menuForm","ref","id","parentId","name","path","component","permission","type","icon","rules","reactive","required","message","trigger","sort","state","title","iconList","options","value","label","children","menuRef","isLoading","openFun","resetForm","getMenuTreeFun","menuObj","getIconList","getMenuTreeSelect","then","res","success","data","errorMsg","msg","submitMenu","validate","valid","editMenu","successMsg","iconJson","require","iconClassList","JSON","parse","stringify","glyphs","map","item","font_class","checkIcon","__exports__"],"sourceRoot":""}