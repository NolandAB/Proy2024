{"version":3,"file":"js/586.3aa229b1.js","mappings":"qQAOO,SAASA,EAAYC,GACxB,OAAOC,EAAAA,EAAAA,GAAQ,CACXC,IAAK,sBACLC,OAAQ,MACRH,UAER,CAOO,SAASI,EAASC,GACrB,OAAOJ,EAAAA,EAAAA,GAAQ,CACXC,IAAK,qBACLC,OAAQ,OACRE,QAER,CAOO,SAASC,EAAcD,GAC1B,OAAOJ,EAAAA,EAAAA,GAAQ,CACXC,IAAK,0BACLC,OAAQ,OACRE,QAER,CAOO,SAASE,EAAQP,GACpB,OAAOC,EAAAA,EAAAA,GAAQ,CACXC,IAAK,oBACLC,OAAQ,SACRH,UAER,CAOO,SAASQ,EAAiBR,GAC7B,OAAOC,EAAAA,EAAAA,GAAQ,CACXC,IAAK,0BACLC,OAAQ,MACRH,UAER,C,gSCvCA,MAAMS,EAAQC,EASRC,EAAOC,EAEPC,GAAUC,EAAAA,EAAAA,IAAS,CACvBC,IAAKA,IAAMN,EAAMO,YACjBC,IAAMC,GAAQP,EAAK,qBAAsBO,KAGrCC,GAAYC,EAAAA,EAAAA,KAAI,GAEhBC,GAAOD,EAAAA,EAAAA,MAEPE,GAAQC,EAAAA,EAAAA,IAAS,CACrBC,SAAU,GACVC,cAAe,GACfC,aAAc,CACZC,SAAU,WACVC,MAAO,UAILC,EAAUA,KACdV,EAAUW,OAAQ,EAClBR,EAAMG,cAAgB,GACtBM,GAAqB,EAGjBC,EAAcA,MAClBC,EAAAA,EAAAA,IAAa,CAAC,GAAGC,MAAKC,IAChBA,EAAIC,QACNd,EAAME,SAAWW,EAAI9B,MAErBgC,EAAAA,EAAAA,IAASF,EAAIG,IACf,GACA,EAGEP,EAAsBA,MAC1BvB,EAAAA,EAAAA,IAAiB,CAAC+B,OAAQ9B,EAAM8B,SAASL,MAAKC,IACxCA,EAAIC,SACFD,EAAI9B,MAAQ8B,EAAI9B,KAAKmC,OAAS,GAChCL,EAAI9B,KAAKoC,SAAQC,IACfpB,EAAMG,cAAckB,KAAKD,EAAKE,OAAO,IAIzCC,YAAW,KACTb,GAAa,GACZ,MAEHK,EAAAA,EAAAA,IAASF,EAAIG,IACf,GACA,EAGEQ,EAAkBA,KACtB3B,EAAUW,OAAQ,GAClBxB,EAAAA,EAAAA,IAAc,CAACiC,OAAQ9B,EAAM8B,OAAQQ,QAAS1B,EAAKS,MAAMkB,mBAAmBd,MAAKC,IAC3EA,EAAIC,UACNa,EAAAA,EAAAA,IAAWd,EAAI9B,MACfQ,EAAQiB,OAAQ,IAEhBO,EAAAA,EAAAA,IAASF,EAAIG,KAEfnB,EAAUW,OAAQ,CAAK,GACvB,E,yzBChGJ,MAAMoB,EAAc,EAEpB,O","sources":["webpack://quasardesign/./src/api/role/sysRole.js","webpack://quasardesign/./src/views/role/authorizeRole.vue","webpack://quasardesign/./src/views/role/authorizeRole.vue?a655"],"sourcesContent":["import request from \"../../utils/request\";\r\n\r\n/**\r\n * Obtener lista de roles\r\n * @param params\r\n * @returns {AxiosPromise}\r\n */\r\nexport function getRoleList(params){\r\n    return request({\r\n        url: '/api/sys/role/table',\r\n        method: 'get',\r\n        params\r\n    })\r\n}\r\n\r\n/**\r\n * Editar rol\r\n * @param data\r\n * @returns {AxiosPromise}\r\n */\r\nexport function editRole(data){\r\n    return request({\r\n        url: '/api/sys/role/edit',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n/**\r\n *Autorización de rol\r\n * @param data\r\n * @returns {AxiosPromise}\r\n */\r\nexport function authorizeRole(data){\r\n    return request({\r\n        url: '/api/sys/role/menu/edit',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n/**\r\n * Eliminar rol\r\n * @param params\r\n * @returns {AxiosPromise}\r\n */\r\nexport function delRole(params){\r\n    return request({\r\n        url: '/api/sys/role/del',\r\n        method: 'delete',\r\n        params\r\n    })\r\n}\r\n\r\n/**\r\n * Obtener el menú de rol autorizado\r\n * @param params\r\n * @returns {AxiosPromise}\r\n */\r\nexport function getMenusByRoleId(params){\r\n    return request({\r\n        url: '/api/sys/role/menu/list',\r\n        method: 'get',\r\n        params\r\n    })\r\n}","<template>\r\n  <el-dialog title=\"Autorizar\" v-model=\"visible\" draggable :close-on-click-modal=\"false\" @opened=\"openFun\">\r\n    <el-tree\r\n        :data=\"state.treeData\"\r\n        ref=\"tree\"\r\n        show-checkbox\r\n        node-key=\"id\"\r\n        :props=\"state.defaultProps\"\r\n        default-expand-all\r\n        :default-checked-keys=\"state.authorizeData\">\r\n    </el-tree>\r\n    <template #footer>\r\n      <span>\r\n      <el-button @click=\"visible = false\">Cancelar</el-button>\r\n      <el-button type=\"primary\" :loading=\"isLoading\" @click=\"submitAuthorize\">Autorizar</el-button>\r\n    </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {getMenuTable} from \"../../api/menu/sysMenu\";\r\nimport {getMenusByRoleId, authorizeRole} from \"../../api/role/sysRole\";\r\nimport {errorMsg, successMsg} from \"../../utils/message\";\r\nimport {computed, reactive, ref} from \"vue\";\r\n\r\nconst props = defineProps({\r\n  authVisible: {\r\n    type: Boolean,\r\n    require: true,\r\n    default: false\r\n  },\r\n  roleId: Number\r\n})\r\n\r\nconst emit = defineEmits(['update:authVisible'])\r\n\r\nconst visible = computed({\r\n  get: () => props.authVisible,\r\n  set: (val) => emit('update:authVisible', val)\r\n})\r\n\r\nconst isLoading = ref(false)\r\n\r\nconst tree = ref()\r\n\r\nconst state = reactive({\r\n  treeData: [],\r\n  authorizeData: [],\r\n  defaultProps: {\r\n    children: 'children',\r\n    label: 'name'\r\n  }\r\n})\r\n\r\nconst openFun = () => {\r\n  isLoading.value = false\r\n  state.authorizeData = []\r\n  getMenusByRoleIdFun()\r\n}\r\n//  Obtener todos los árboles de menú del personaje actual\r\nconst getMenuTree = () => {\r\n  getMenuTable({}).then(res => {\r\n    if (res.success){\r\n      state.treeData = res.data\r\n    } else {\r\n      errorMsg(res.msg)\r\n    }\r\n  })\r\n}\r\n//  Obtener la lista de menú autorizada por el rol actual\r\nconst getMenusByRoleIdFun = () => {\r\n  getMenusByRoleId({roleId: props.roleId}).then(res => {\r\n    if (res.success){\r\n      if (res.data && res.data.length > 0){\r\n        res.data.forEach(item => {\r\n          state.authorizeData.push(item.menuId)\r\n        })\r\n      }\r\n      //  El retardador se utiliza principalmente para representar el menú autorizado. El tiempo de retardo se puede ajustar según la situación específica.\r\n      setTimeout(() => {\r\n        getMenuTree()\r\n      }, 10)\r\n    } else {\r\n      errorMsg(res.msg)\r\n    }\r\n  })\r\n}\r\n//  Entregar\r\nconst submitAuthorize = () => {\r\n  isLoading.value = true\r\n  authorizeRole({roleId: props.roleId, menuIds: tree.value.getCheckedKeys()}).then(res => {\r\n    if (res.success){\r\n      successMsg(res.data)\r\n      visible.value = false\r\n    } else {\r\n      errorMsg(res.msg)\r\n    }\r\n    isLoading.value = false\r\n  })\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>","import script from \"./authorizeRole.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./authorizeRole.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["getRoleList","params","request","url","method","editRole","data","authorizeRole","delRole","getMenusByRoleId","props","__props","emit","__emit","visible","computed","get","authVisible","set","val","isLoading","ref","tree","state","reactive","treeData","authorizeData","defaultProps","children","label","openFun","value","getMenusByRoleIdFun","getMenuTree","getMenuTable","then","res","success","errorMsg","msg","roleId","length","forEach","item","push","menuId","setTimeout","submitAuthorize","menuIds","getCheckedKeys","successMsg","__exports__"],"sourceRoot":""}