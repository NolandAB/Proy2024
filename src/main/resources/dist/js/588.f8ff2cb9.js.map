{"version":3,"file":"js/588.f8ff2cb9.js","mappings":"wQAOO,SAASA,EAAYC,GACxB,OAAOC,EAAAA,EAAAA,GAAQ,CACXC,IAAK,sBACLC,OAAQ,MACRH,UAER,CAOO,SAASI,EAASC,GACrB,OAAOJ,EAAAA,EAAAA,GAAQ,CACXC,IAAK,qBACLC,OAAQ,OACRE,QAER,CAOO,SAASC,EAAcD,GAC1B,OAAOJ,EAAAA,EAAAA,GAAQ,CACXC,IAAK,0BACLC,OAAQ,OACRE,QAER,CAOO,SAASE,EAAQP,GACpB,OAAOC,EAAAA,EAAAA,GAAQ,CACXC,IAAK,oBACLC,OAAQ,SACRH,UAER,CAOO,SAASQ,EAAiBR,GAC7B,OAAOC,EAAAA,EAAAA,GAAQ,CACXC,IAAK,0BACLC,OAAQ,MACRH,UAER,C,gTC/BA,MAAMS,EAAQC,EASRC,EAAOC,EAEPC,GAAUC,EAAAA,EAAAA,IAAS,CACvBC,IAAKA,IAAMN,EAAMO,cACjBC,IAAMC,GAAQP,EAAK,uBAAwBO,KAGvCC,GAAYC,EAAAA,EAAAA,KAAI,GAEhBC,GAAUD,EAAAA,EAAAA,MAEVE,GAAQC,EAAAA,EAAAA,IAAS,CACrBC,MAAO,QACPC,SAAU,CACRC,GAAI,KACJC,SAAU,GACVC,SAAU,GACVC,QAAS,IAEXC,MAAO,CACLH,SAAU,CAAC,CAACI,UAAU,EAAMC,QAAS,4CAA6CC,QAAS,SAC3FL,SAAU,CAAC,CAACG,UAAU,EAAMC,QAAS,4CAA6CC,QAAS,SAC3FJ,QAAS,CAAC,CAACE,UAAU,EAAMC,QAAS,yCAA0CC,QAAS,YAEzFC,SAAU,KAGNC,EAAUA,MACdC,EAAAA,EAAAA,GAAUf,EAAQgB,OAClBf,EAAME,MAAQ,QACdc,IACAnB,EAAUkB,OAAQ,EACd5B,EAAM8B,QAAQb,KAChBJ,EAAME,MAAQ,SACdF,EAAMG,SAAWhB,EAAM8B,QACvBjB,EAAMG,SAASI,QAAUP,EAAMG,SAASI,QAAQ,GAAGW,MAAM,KAEzDlB,EAAMG,SAASI,QAAUP,EAAMG,SAASI,QAAQY,IAAIC,QACtD,EAGIJ,EAAiBA,MACrBvC,EAAAA,EAAAA,IAAY,CAAC,GAAG4C,MAAKC,IACfA,EAAIC,QACNvB,EAAMY,SAAWU,EAAIvC,MAErByC,EAAAA,EAAAA,IAASF,EAAIG,IACf,GACA,EAGEC,EAAaA,KACjBC,QAAQC,IAAI,YACZ7B,EAAQgB,MAAMc,UAAUC,IAClBA,IACFjC,EAAUkB,OAAQ,GAClBgB,EAAAA,EAAAA,IAAS/B,EAAMG,UAAUkB,MAAKC,IACxBA,EAAIC,UACNS,EAAAA,EAAAA,IAAWV,EAAIvC,MACf4C,QAAQC,IAAIN,EAAIvC,MAChBQ,EAAQwB,OAAQ,EAChB1B,EAAK,cAELmC,EAAAA,EAAAA,IAASF,EAAIG,KAEf5B,EAAUkB,OAAQ,CAAK,IAE3B,GACA,E,y+DCzGJ,MAAMkB,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://quasardesign/./src/api/role/sysRole.js","webpack://quasardesign/./src/views/user/editUser.vue","webpack://quasardesign/./src/views/user/editUser.vue?9d15"],"sourcesContent":["import request from \"../../utils/request\";\r\n\r\n/**\r\n * Obtener lista de roles\r\n * @param params\r\n * @returns {AxiosPromise}\r\n */\r\nexport function getRoleList(params){\r\n    return request({\r\n        url: '/api/sys/role/table',\r\n        method: 'get',\r\n        params\r\n    })\r\n}\r\n\r\n/**\r\n * Editar rol\r\n * @param data\r\n * @returns {AxiosPromise}\r\n */\r\nexport function editRole(data){\r\n    return request({\r\n        url: '/api/sys/role/edit',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n/**\r\n *Autorización de rol\r\n * @param data\r\n * @returns {AxiosPromise}\r\n */\r\nexport function authorizeRole(data){\r\n    return request({\r\n        url: '/api/sys/role/menu/edit',\r\n        method: 'post',\r\n        data\r\n    })\r\n}\r\n\r\n/**\r\n * Eliminar rol\r\n * @param params\r\n * @returns {AxiosPromise}\r\n */\r\nexport function delRole(params){\r\n    return request({\r\n        url: '/api/sys/role/del',\r\n        method: 'delete',\r\n        params\r\n    })\r\n}\r\n\r\n/**\r\n * Obtener el menú de rol autorizado\r\n * @param params\r\n * @returns {AxiosPromise}\r\n */\r\nexport function getMenusByRoleId(params){\r\n    return request({\r\n        url: '/api/sys/role/menu/list',\r\n        method: 'get',\r\n        params\r\n    })\r\n}","<template>\r\n  <el-dialog :title=\"state.title\" v-model=\"visible\" :close-on-click-modal=\"false\" @opened=\"openFun\">\r\n    <el-form :model=\"state.userForm\" :rules=\"state.rules\" ref=\"userRef\" label-width=\"120px\">\r\n      <el-form-item v-show=\"false\" prop=\"id\">\r\n        <el-input v-model=\"state.userForm.id\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"nombre de usuario\" prop=\"username\">\r\n        <el-input v-model=\"state.userForm.username\" placeholder=\"Por favor ingrese el nombre de usuario\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"Apoodo\" prop=\"nickName\">\r\n        <el-input v-model=\"state.userForm.nickName\" placeholder=\"Por favor ingresa un apodo\"></el-input>\r\n      </el-form-item>\r\n      <el-form-item label=\"rol de usuario\" prop=\"roleIds\">\r\n        <el-select v-model=\"state.userForm.roleIds\" multiple placeholder=\"Por favor seleccione un rol\">\r\n          <el-option v-for=\"(item, index) in state.roleList\" :key=\"index\" :label=\"item.roleName\" :value=\"parseInt(item.id)\"></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n    </el-form>\r\n    <template #footer>\r\n      <span>\r\n      <el-button @click=\"resetForm(userRef)\">reiniciar</el-button>\r\n      <el-button type=\"primary\" :loading=\"isLoading\" @click=\"submitUser\">seguro</el-button>\r\n    </span>\r\n    </template>\r\n  </el-dialog>\r\n</template>\r\n\r\n<script setup>\r\nimport {editUser} from \"../../api/user/sysUser\";\r\nimport {getRoleList} from \"../../api/role/sysRole\";\r\nimport {errorMsg, successMsg} from \"../../utils/message\";\r\nimport {resetForm} from \"../../utils/common\";\r\nimport {computed, reactive, ref} from \"vue\";\r\n\r\nconst props = defineProps({\r\n  dialogVisible: {\r\n    type: Boolean,\r\n    required: true,\r\n    default: false\r\n  },\r\n  userObj: Object\r\n})\r\n\r\nconst emit = defineEmits(['update:dialogVisible', 'get-list'])\r\n\r\nconst visible = computed({\r\n  get: () => props.dialogVisible,\r\n  set: (val) => emit('update:dialogVisible', val)\r\n})\r\n\r\nconst isLoading = ref(false)\r\n\r\nconst userRef = ref()\r\n\r\nconst state = reactive({\r\n  title: 'Nuevo',\r\n  userForm: {\r\n    id: null,\r\n    username: '',\r\n    nickName: '',\r\n    roleIds: []\r\n  },\r\n  rules: {\r\n    username: [{required: true, message: 'El nombre de usuario no puede estar vacío', trigger: 'blur'}],\r\n    nickName: [{required: true, message: 'El apodo del usuario no puede estar vacío', trigger: 'blur'}],\r\n    roleIds: [{required: true, message: 'El rol de usuario no puede estar vacío', trigger: 'change'}]\r\n  },\r\n  roleList: []\r\n})\r\n\r\nconst openFun = () => {\r\n  resetForm(userRef.value)\r\n  state.title = 'Nuevo'\r\n  getRoleListFun()\r\n  isLoading.value = false\r\n  if (props.userObj.id){\r\n    state.title = 'Editar'\r\n    state.userForm = props.userObj\r\n    state.userForm.roleIds = state.userForm.roleIds[0].split(',')\r\n    // Convertir números de cadena en roleIds a números\r\n    state.userForm.roleIds = state.userForm.roleIds.map(Number)\r\n  }\r\n}\r\n//  Obtener lista de roles\r\nconst getRoleListFun = () => {\r\n  getRoleList({}).then(res => {\r\n    if (res.success){\r\n      state.roleList = res.data\r\n    } else {\r\n      errorMsg(res.msg)\r\n    }\r\n  })\r\n}\r\n//  Entregar\r\nconst submitUser = () => {\r\n  console.log('INSERTAR');\r\n  userRef.value.validate((valid) => {\r\n    if (valid){\r\n      isLoading.value = true\r\n      editUser(state.userForm).then(res => {\r\n        if (res.success){\r\n          successMsg(res.data)\r\n          console.log(res.data)\r\n          visible.value = false\r\n          emit('get-list')\r\n        } else {\r\n          errorMsg(res.msg)\r\n        }\r\n        isLoading.value = false\r\n      })\r\n    }\r\n  })\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n :deep(.vue-treeselect__control){\r\n  height: 28px;\r\n}\r\n :deep(.el-form-item__content){\r\n   line-height: 28px;\r\n   font-size: 12px;\r\n }\r\n</style>","import script from \"./editUser.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./editUser.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./editUser.vue?vue&type=style&index=0&id=a24c4b0e&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-a24c4b0e\"]])\n\nexport default __exports__"],"names":["getRoleList","params","request","url","method","editRole","data","authorizeRole","delRole","getMenusByRoleId","props","__props","emit","__emit","visible","computed","get","dialogVisible","set","val","isLoading","ref","userRef","state","reactive","title","userForm","id","username","nickName","roleIds","rules","required","message","trigger","roleList","openFun","resetForm","value","getRoleListFun","userObj","split","map","Number","then","res","success","errorMsg","msg","submitUser","console","log","validate","valid","editUser","successMsg","__exports__"],"sourceRoot":""}